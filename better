-- Dynamic hourly run with late-arrival window [hour_end-3h, hour_end)
WITH time_window AS (
  SELECT
    TIMESTAMP_TRUNC('2025-08-11 3:00:00', HOUR)                                 AS hour_end,
    TIMESTAMP_SUB(TIMESTAMP_TRUNC('2025-08-11 3:00:00', HOUR), INTERVAL 3 HOUR) AS hour_start
),
/* Parse/clean JSON once; derive string & checksum from it */
base_data AS (
  SELECT
    TIMESTAMP_TRUNC(trans_hr, HOUR)                            AS event_time,     -- use the partition column
    fqdn,
    labels_json_clean,
    TO_JSON_STRING(labels_json_clean)                           AS labels_clean_str,
    MD5(TO_JSON_STRING(labels_json_clean))                      AS checksum,
    JSON_VALUE(labels,'$.instance')                             AS instance,
    LOWER(name)                                                 AS KEY,
    SAFE_CAST(NULLIF(value,'NaN') AS FLOAT64)                   AS value,
    DATE(`timestamp`)                                           AS trans_dt,
    `timestamp`,
    insert_date_utc
  FROM (
    SELECT
      fqdn,
      labels,
      name,
      value,
      `timestamp`,
      insert_date_utc,
      trans_hr,
      JSON_REMOVE(
        SAFE.PARSE_JSON(labels),
        '$.__name__','$.jobid','$.job','$.localdn','$.instance',
        '$.write_relabel_group','$.kubernetes_namespace','$.kubernetes_pod_name',
        '$.pod_name','$.applicationId','$.icr_group'
      ) AS labels_json_clean
    FROM `vz-it-pr-gudv-dtwndo-0.aid_dtwin_core_uat_tbls.oracle_cnf_scp_raw_v1_temp`, time_window
    WHERE
      -- ***** Partition pruning on trans_hr (your partition column) *****
      trans_hr >= time_window.hour_start
      AND trans_hr <  time_window.hour_end
      -- Late-arrival gate (only rows that ARRIVED in these 3 hours)
      AND insert_date_utc >= time_window.hour_start
      AND insert_date_utc <  time_window.hour_end
      -- Keep only rows that have a metric timestamp
      AND `timestamp` IS NOT NULL
  )
),
/* De-dup: keep latest by insert time (do NOT include FLOAT64 'value' in PARTITION BY) */
dedup AS (
  SELECT event_time, fqdn, labels_json_clean, labels_clean_str, checksum,
         instance, KEY, value, `timestamp`, insert_date_utc, trans_dt
  FROM base_data
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY event_time, fqdn, labels_clean_str, instance, KEY, `timestamp`
    ORDER BY insert_date_utc DESC
  ) = 1
),
window_data AS (
  SELECT
    trans_dt, event_time, fqdn, labels_json_clean, labels_clean_str, checksum,
    instance, KEY, value, `timestamp`,
    LAG(value) OVER (
      PARTITION BY fqdn, instance, checksum, KEY, event_time
      ORDER BY `timestamp`
    ) AS prev_value,
    FIRST_VALUE(value) OVER (
      PARTITION BY trans_dt, event_time, fqdn, instance, checksum, KEY
      ORDER BY `timestamp` DESC
    ) AS sum_by_value
  FROM dedup
),
reset_adjusted AS (
  SELECT
    event_time, fqdn, instance, trans_dt, checksum, KEY,
    ANY_VALUE(labels_clean_str)  AS labels_str,     -- string version (for safe agg)
    ANY_VALUE(labels_json_clean) AS labels_json,    -- JSON-safe agg
    SUM(value) AS sum_value,
    SUM(CASE
          WHEN prev_value IS NULL THEN 0
          WHEN value < prev_value THEN value
          ELSE value - prev_value
        END) AS increase_value,
    APPROX_QUANTILES(value, 100)[OFFSET(90)] AS p_90,
    MAX(sum_by_value) AS sum_by_value
  FROM window_data
  GROUP BY event_time, fqdn, instance, trans_dt, checksum, KEY
),
final_agg AS (
  SELECT
    event_time, fqdn, trans_dt, checksum, KEY,
    ANY_VALUE(labels_json)  AS labels_json,
    SUM(increase_value)     AS increase_value,
    SUM(sum_value)          AS sum_value,
    SUM(p_90)               AS p_90,
    SUM(sum_by_value)       AS sum_by_value
  FROM reset_adjusted
  GROUP BY event_time, fqdn, trans_dt, checksum, KEY
)
SELECT
  event_time                                   AS event_time,
  'ericsson'                                   AS vendor,
  fqdn,
  labels_json                                   AS labels,         -- JSON object
  KEY                                          AS metric_name,
  SAFE_CAST(increase_value AS BIGNUMERIC)      AS metric_increase_value,
  SAFE_CAST(sum_value      AS BIGNUMERIC)      AS metric_sum_value,
  SAFE_CAST(p_90           AS BIGNUMERIC)      AS metric_p_90_value,
  SAFE_CAST(sum_by_value   AS BIGNUMERIC)      AS metric_sum_by_value,
  trans_dt,
  DATETIME((SELECT hour_end FROM time_window)) AS schedule_time,
  CURRENT_TIMESTAMP                            AS updated_timestamp
FROM final_agg, time_window;

